name: Copy MSI to Halo server and Create package
on:
  push:
    branches: [ Testing-branch]
  workflow_dispatch:
      inputs:
        HALO_IP_ADDRESS:
          description: 'Halo IP address'
          type: string
          required: true
          default: "10.210.222.182"
        MSI_PATH:
          description: "MSI Path"
          type: string
          required: true
          default: "\\\\dev.us.corp\\de\\Dev\\DailyBuilds\\60046\\NET CD Structure\\UltiProWeb\\Web Server.msi"
        BUILD_VERSION:
          description: "Build version"
          type: string
          required: true
          default: "8.0.0"
  
jobs:
  build:
    runs-on: [garm, dev, us-east4, vm, windows, medium]
    env: # No need if workflow_dispatch works
      HALO_IP_ADDRESS : "10.210.222.182"
      MSI_PATH : "\\\\dev.us.corp\\de\\Dev\\DailyBuilds\\60046\\NET CD Structure\\UltiProWeb\\Web Server.msi"
      BUILD_VERSION : "8.0.0"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Choco package
        run: |
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
           Write-Output "Chocolatey is not installed. Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force; 
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; 
            iwr https://community.chocolatey.org/install.ps1 -UseBasicParsing | iex
          } else {
           Write-Output "Chocolatey is already installed."
          }
        
      - name: Copy MSI from Build path to Runner 
        run: |
          # Credentials will be in GCP secrets.
          $workingDirectory = "${{ github.workspace }}"
          $secureNetworkPassword = ConvertTo-SecureString "Abhishek@ukg!@#" -AsPlainText -Force
          $networkCredential = New-Object System.Management.Automation.PSCredential ("CORPORATE_NT\abhishek.m", $secureNetworkPassword)

          # Map network drive
          $folderPath = [System.IO.Path]::GetDirectoryName("${{ env.MSI_PATH }}")
          $file = [System.IO.Path]::GetFileName("${{ env.MSI_PATH }}")
          New-PSDrive -Name Z -PSProvider FileSystem -Root  $folderPath -Credential $networkCredential -Persist

          Write-Output "MSI_FILE=$file" >> $env:GITHUB_ENV

          # Copy the file to the local directory
          Copy-Item "Z:\$file" -Destination  $workingDirectory

          # Verify the file exists at the destination
          $msiCopiedPath = "$workingDirectory\$file" 
          Write-Output "MSI_COPIED_PATH=$msiCopiedPath" >> $env:GITHUB_ENV

          if (Test-Path -Path $msiCopiedPath) {
             Write-Output "File copied successfully to $msiCopiedPath."
          } else {
             Write-Output "File copy failed. The file does not exist at $msiCopiedPath."
          }
          
          # Clean up mapped drive
          Remove-PSDrive -Name Z
 
      - name: Copy MSI from Runner to Halo
        run: |
         
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value "${{ env.HALO_IP_ADDRESS }}" -Force

          $securePassword = ConvertTo-SecureString '!@bZjbQQ!9tz' -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ('CORPORATE_NT\administrator', $securePassword)
          
          $Session = New-PSSession -ComputerName "${{ env.HALO_IP_ADDRESS }}" -Credential $credential
          $destinationPath = "D:\Artifacts\MSIS"
          Invoke-Command -Session $Session -ScriptBlock {     
            param ($destinationPath)    
            if (-not (Test-Path -Path $destinationPath)) {        
               New-Item -Path $destinationPath -ItemType Directory     
            } 
          } -ArgumentList $destinationPath

          Copy-Item "${{ env.MSI_COPIED_PATH }}" -Destination "$destinationPath" -ToSession $Session
          Remove-PSSession -Session $Session
          
        - name: Create Chocolatey package and Install
          run: |
              $scriptPath = "${{ github.workspace }}\scripts\create-package.ps1"
              & $scriptPath -version "${{ env.BUILD_VERSION }}" -msiPath "${{ env.MSI_COPIED_PATH }}"
              $packagPath = ".\packs\*.nupkg"

              $securePassword = ConvertTo-SecureString '!@bZjbQQ!9tz' -AsPlainText -Force
              $credential = New-Object System.Management.Automation.PSCredential ('CORPORATE_NT\administrator', $securePassword)

              $Session = New-PSSession -ComputerName "${{ env.HALO_IP_ADDRESS }}" -Credential $credential
              $destinationPath = "D:\Artifacts\PACKS"
              Invoke-Command -Session $Session -ScriptBlock {     
                  param ($destinationPath)    
                  if (-not (Test-Path -Path $destinationPath)) {        
                    New-Item -Path $destinationPath -ItemType Directory     
                  } 
                } -ArgumentList $destinationPath
              Copy-Item "$packagPath" -Destination "$destinationPath" -ToSession $Session

              Invoke-Command -Session $Session -ScriptBlock {     
                  param ($destinationPath, $msiFile, $version)

                  $packageParameters = '/filelocation:$destinationPath\$msiFile /arguments:US_COMPLUS_USERNAME=".administrator"%space%US_COMPLUS_PASSWORD="!@bZjbQQ!9tz"%space%US_DOTNETWEB_URL="https://sonatashrdweb.newgen.corp:443"%space%US_CLASSICWEB_URL="https://sonatashrdweb.newgen.corp:444"%space%US_DOTNETWEB_PORTNUMBER="80"%space%US_CLASSICWEB_PORTNUMBER="81"%space%US_SITESERVER="sonatashrdsite"%space%US_SITEUSER="keyuser"%space%US_SITEPASSWORD="password"%space%US_USSALT="password"%space%US_WEB_USERNAME=".administrator"%space%US_WEB_PASSWORD="!@bZjbQQ!9tz"%space%US_DOTNETWEB_SSL_PORTNUMBER="443"%space%US_CLASSICWEB_SSL_PORTNUMBER="444"%space%US_CERTIFICATE="c:installsnewgen.corp.pfx"%space%US_CLASSICWEB_CERTIFICATE="c:installsnewgen.corp.pfx"%space%US_CERTIFICATE_PASSWORD="7S0x1SzTGXDdsVey"%space%US_CLASSICWEB_CERTIFICATE_PASSWORD="7S0x1SzTGXDdsVey"%space%REBOOT="ReallySuppress"%space%'
                  
                  Write-Output  "Parameters=$packageParameters"
                  cd $destinationPath
                  choco install $msiFile --version $version --package-parameters=`"`'$packageParameters`'`" --source . -y --force
                 
              } -ArgumentList $destinationPath, "${{ env.MSI_FILE}}", "${{ env.BUILD_VERSION }}"

              Remove-PSSession -Session $Session