name: Create and upload chocolatey packages to JFrog

on:
  workflow_dispatch:
    inputs:
      VERSION:
        description: 'Version to process'
        required: true
        type: string

jobs:
  prepare-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.prepare.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read and filter package configuration
        id: prepare
        run: |
          VERSION=${{ github.event.inputs.VERSION }}
          PACKAGES=$(jq -c --arg version "$VERSION" '.[] | select(.version == $version) | .msis' config/create-package-config.json)
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
          echo "::set-output name=packages::$PACKAGES"

  build:
    needs: prepare-packages
    runs-on: self-hosted
    strategy:
      matrix:
        msi: ${{ fromJson(needs.prepare-packages.outputs.packages) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Choco package
        run: |
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Output "Chocolatey is not installed. Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force; 
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; 
            iwr https://community.chocolatey.org/install.ps1 -UseBasicParsing | iex
          } else {
            Write-Output "Chocolatey is already installed."
          }

      - name: Install JFROG CLI
        run: |
          if (-not (Get-Command jfrog -ErrorAction SilentlyContinue)) {
            Write-Output "JFrog CLI is not installed. Installing JFrog CLI..."
            choco install jfrog-cli -y
          } else {
            Write-Output "JFrog CLI is already installed."
          }
        env:
          JF_URL: ${{ vars.JFROG_ARTIFACTORY_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_TOKEN }}
      
      - name: Create package
        run: |
          $scriptPath = "${{ github.workspace }}\scripts\create-package.ps1"
          & $scriptPath -version "${{ github.event.inputs.VERSION }}" -msiname "${{ matrix.msi.MSI_NAME }}" -msipath "${{ matrix.msi.MSI_PATH }}"

      - name: Upload package
        run: |
          jf rt u ".\packs\${{ matrix.msi.MSI_NAME }}.${{ github.event.inputs.VERSION }}.nupkg" ${{ vars.JFROG_REPOSITORY }}
